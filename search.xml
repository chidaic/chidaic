<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开发小白——项目开发的文件夹管理模式</title>
      <link href="/chidaic/2023/11/27/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/Folder/"/>
      <url>/chidaic/2023/11/27/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/Folder/</url>
      
        <content type="html"><![CDATA[<h2 id="Controler"><a href="#Controler" class="headerlink" title="Controler"></a>Controler</h2><p>前后端分离一般用api，下面可以分v1,v2的子目录作为版本</p><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>管理网站的配置参数</p><h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><p>数据库的存储读写</p><h2 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h2><p>中间件，前后端分离用配置跨域中间件</p><h2 id="routes"><a href="#routes" class="headerlink" title="routes"></a>routes</h2><p>作为路由的接口</p><h2 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h2><p>公共工具的包放在这里面</p>]]></content>
      
      
      <categories>
          
          <category> 项目经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自学Go---和C++的不同之处</title>
      <link href="/chidaic/2023/09/24/Golang%E7%AC%94%E8%AE%B0/gocompare/"/>
      <url>/chidaic/2023/09/24/Golang%E7%AC%94%E8%AE%B0/gocompare/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经由学长引荐，得到了可以学习Go的机会。Go是未来的一门趋势，有望取代目前互联网Java的地位。后端开发需学<br>本人主要在<a href="https://www.cainiaojc.com/golang/golang-tutorial.html">菜鸟教程</a>上进行学习</p><h1 id="Go语言数据类型"><a href="#Go语言数据类型" class="headerlink" title="Go语言数据类型"></a>Go语言数据类型</h1><p>数据类型指定有效的Go变量可以保存的数据类型。在Go语言中，类型分为以下四类：</p><pre><code>1、基本类型：数字，字符串和布尔值属于此类别。2、聚合类型：数组和结构属于此类别。3、引用类型：指针，切片，map集合，函数和Channel属于此类别。4、接口类型</code></pre><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>在Go语言中，数字分为三个子类别：整数，浮点数，布尔类型</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>在Go语言中，有符号和无符号整数都可以使用四种不同的大小，如下表所示。有符号的int由int表示，而无符号的整数由uint表示。<br>数据类型描述<br>int88位有符号整数<br>int1616位有符号整数<br>int3232位有符号整数<br>int6464位有符号整数<br>uint88位无符号整数<br>uint1616位无符号整数<br>uint3232位无符号整数<br>uint6464位无符号整数<br>intin和uint都包含相同的大小，无论是32位还是64位。<br>uintin和uint都包含相同的大小，无论是32位还是64位。<br>rune它是int32的同义词，也表示Unicode代码点。<br>byte它是int8的同义词。<br>uintptr它是无符号整数类型。它的宽度未定义，但是可以容纳指针值的所有位。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用整数 </span></span><br><span class="line"><span class="keyword">package</span> main  </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 使用8位无符号整型</span></span><br><span class="line">    <span class="keyword">var</span> X <span class="type">uint8</span> = <span class="number">225</span> </span><br><span class="line">    fmt.Println(X+<span class="number">1</span>, X) </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 使用16位有符号整型</span></span><br><span class="line">    <span class="keyword">var</span> Y <span class="type">int16</span> = <span class="number">32767</span> </span><br><span class="line">    fmt.Println(Y+<span class="number">2</span>, Y<span class="number">-2</span>)  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出如下</span></span><br><span class="line"><span class="comment">// 226 225</span></span><br><span class="line"><span class="comment">// -32767 32765</span></span><br></pre></td></tr></table></figure><p>与C++不同的是整数类型基本都是int附带位数，除此之外还有同Java相同的byte类型，以及新增的rune,uintptr</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>同理，在Go中使用float32与float64代表浮点数，float64等同于c++中的double。</p><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>在Go中增加了复数<br>将复数分为两部分，如下表所示。float32和float64也是这些复数的一部分。内建函数从它的虚部和实部创建一个复数，内建虚部和实部函数提取这些部分。<br>数据类型描述<br>complex64包含float32作为实数和虚数分量的复数。<br>complex128包含float64作为实数和虚数分量的复数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复数的使用 </span></span><br><span class="line"><span class="keyword">package</span> main </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; </span><br><span class="line">      </span><br><span class="line">   <span class="keyword">var</span> a <span class="type">complex128</span> = <span class="built_in">complex</span>(<span class="number">6</span>, <span class="number">2</span>) </span><br><span class="line">   <span class="keyword">var</span> b <span class="type">complex64</span> = <span class="built_in">complex</span>(<span class="number">9</span>, <span class="number">2</span>) </span><br><span class="line">   fmt.Println(a) </span><br><span class="line">   fmt.Println(b) </span><br><span class="line">     </span><br><span class="line">   <span class="comment">//显示类型 </span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;a的类型是 %T 以及&quot;</span>+ <span class="string">&quot;b的类型是 %T&quot;</span>, a, b) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Go语言变量"><a href="#Go语言变量" class="headerlink" title="Go语言变量"></a>Go语言变量</h1><p>Go语言变量的声明十分有意思，有两种方式：</p><h2 id="var关键字声明"><a href="#var关键字声明" class="headerlink" title="var关键字声明"></a>var关键字声明</h2><p><code>(var variable_name type = expression)</code><br><strong>在上述语法中，类型（type） 或&#x3D;表达式可以删除，但不能同时删除变量声明中的两个。</strong><br><strong>如果删除了类型，则变量的类型由表达式中的值初始化确定。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量的概念</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//变量声明和初始化</span></span><br><span class="line">    <span class="comment">//显式类型</span></span><br><span class="line">    <span class="keyword">var</span> myvariable1 = <span class="number">20</span></span><br><span class="line">    <span class="keyword">var</span> myvariable2 = <span class="string">&quot;nhooo&quot;</span></span><br><span class="line">    <span class="keyword">var</span> myvariable3 = <span class="number">34.80</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Display the value and the</span></span><br><span class="line">    <span class="comment">// type of the variables</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;myvariable1的值是 : %d\n&quot;</span>, myvariable1)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;myvariable1的类型是 : %T\n&quot;</span>, myvariable1)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;myvariable2的值是 : %s\n&quot;</span>, myvariable2)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;myvariable2的类型是 : %T\n&quot;</span>, myvariable2)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;myvariable3的值是 : %f\n&quot;</span>, myvariable3)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;myvariable3的类型是 : %T\n&quot;</span>, myvariable3)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">// myvariable1的值是 : 20</span></span><br><span class="line"><span class="comment">// myvariable1的类型是 : int</span></span><br><span class="line"><span class="comment">// myvariable2的值是 : nhooo</span></span><br><span class="line"><span class="comment">// myvariable2的类型是 : string</span></span><br><span class="line"><span class="comment">// myvariable3的值是 : 34.800000</span></span><br><span class="line"><span class="comment">// myvariable3的类型是 : float64</span></span><br></pre></td></tr></table></figure><p><strong>如果删除了表达式，则该变量的类型为零，数字为零，布尔值为false，字符串为“”，接口和引用类型为nil。因此，在Go语言中没有这样的未初始化变量的概念。</strong></p><h2 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h2><p><code>(Myint :=100)</code> 使用<code>(:=)</code>可达成既声明又复制的效果，在一般的变量声明中通常都使用这种方法。<br>##短声明智能声明局部变量，不可声明全局变量##</p>]]></content>
      
      
      <categories>
          
          <category> Golang笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决vscode报错gopls was not able to find modules in your workspace.</title>
      <link href="/chidaic/2023/09/23/Golang%E7%AC%94%E8%AE%B0/Golang/"/>
      <url>/chidaic/2023/09/23/Golang%E7%AC%94%E8%AE%B0/Golang/</url>
      
        <content type="html"><![CDATA[<h1 id="没有go-mod文件"><a href="#没有go-mod文件" class="headerlink" title="没有go.mod文件"></a>没有go.mod文件</h1><p>原因是当前目录没有go.mod文件，因此vscode会出现如下报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gopls was not able to find modules in your workspace.</span><br><span class="line">When outside of GOPATH, gopls needs to know which modules</span><br><span class="line">you are working on.You can fix this by opening your workspace</span><br><span class="line">to a folder inside a Go module, or by using a go.work file</span><br><span class="line">to specify multiple m</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行命令行<code>($ go mod init packagestudy)</code>即可<br>在文件同级目录下初始化一个新的Go模块，会自动创建一个<code>(go.mod)</code>文件</p>]]></content>
      
      
      <categories>
          
          <category> Golang笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自学Java---和C++的不同之处</title>
      <link href="/chidaic/2023/09/22/Java%E7%AC%94%E8%AE%B0/javacompare/"/>
      <url>/chidaic/2023/09/22/Java%E7%AC%94%E8%AE%B0/javacompare/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前来看，中国的互联网开发岗位，依旧是以Java为主。<br>网上的Java教程已经许多，视频或者网页等形式，其中不乏许多优质教程。</p><p>视频课教程大家都比较推荐韩顺平老师的课程，而网站在线学习我选择的是<a href="https://www.cainiaojc.com/java/java-tutorial.html">菜鸟教程</a><br>目前的学习方式是在网站在线学习，为什么不看视频课，有以下原因：<br>(1)自己已经学习过c,c++，Python等语言，并不是0基础，目前视频教程多对0基础十分友好，但对于有一定编程基础的学习者来说，重复学习内容较多，视频的效率比较低下<br>(2)网站在线学习教程提供了很好的实例程序以及在线编译器，方便学习。</p><p>C++是自己所学的第一门面向对象语言，也是学校培养方案里唯一一门必修面向对象，自然是现阶段最熟悉的面向对象语言。Java同样也是面向对象语言，在学习的过程中与C++对比，总结一些不同之处，也有助于自己的学习记忆巩固。</p><h1 id="Java基本数据类型"><a href="#Java基本数据类型" class="headerlink" title="Java基本数据类型"></a>Java基本数据类型</h1><p>与C++不同的是，Java新增了数据类型<code>byte</code>。<br>    byte 数据类型是8位、有符号的，以二进制补码表示的整数；<br>    最小值是 -128（-2^7）；<br>    最大值是 127（2^7-1）；<br>    默认值是 0；<br>    byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；<br>    实例：byte a &#x3D; 100，byte b &#x3D; -50。<br>在C++中可以使用 <code>unsigned char[3];</code> 起到相同的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimitiveTypeTest</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// byte  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Byte&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java变量类型"><a href="#Java变量类型" class="headerlink" title="Java变量类型"></a>Java变量类型</h1><p>在Java中，C++的成员变量叫做示例变量，而C++中的<code>const</code>常量在Java中则是<code>final</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/chidaic/2023/08/30/%E6%9D%82%E8%B0%88/hello-world/"/>
      <url>/chidaic/2023/08/30/%E6%9D%82%E8%B0%88/hello-world/</url>
      
        <content type="html"><![CDATA[<p>大家好，这是我的第一篇个人博客，现在只是测试，虽然是说大家好，但是根本就没有人看，所以不久之后也会被我删掉233</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//欧几里得算法求最大公约数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a%b==<span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="字体展示"><a href="#字体展示" class="headerlink" title="字体展示"></a>字体展示</h1><p><strong>强调</strong></p><p><em>斜体</em></p><p><del>删除线</del></p><p><code>print(Hello,World!)</code></p><blockquote><p>引用</p></blockquote><ul><li>列表一</li><li>列表二</li></ul><p><a href="https://github.com/">这是一个链接</a></p><p><img src="https://s2.loli.net/2023/09/01/ADczty3HIWLvPb9.jpg" alt="这是一张图片"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
